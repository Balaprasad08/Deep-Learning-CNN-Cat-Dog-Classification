# -*- coding: utf-8 -*-
"""CNN Cat & Dog Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12iiGBXvGfwqsLSftFoKtIE4yDsCNUX2O

# Cat & Dog Classification using CNN
"""

#Load Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import warnings
warnings.filterwarnings('ignore')
import keras

from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from keras.callbacks import ModelCheckpoint
from keras.layers.normalization import BatchNormalization
from keras.regularizers import l2

"""### Load Data"""

from zipfile import ZipFile
file_path='/content/drive/MyDrive/dataset.zip'
with ZipFile(file_path,'r') as zip:
  zip.extractall()
  print('finish')

train_data_path = '/content/dataset/training_set'
validation_data_path = '/content/dataset/test_set'

"""### Data Preprocessing"""

training_datagen=ImageDataGenerator(rescale=1./255,
                                   rotation_range=40,
                                    width_shift_range=0.2,
                                      height_shift_range=0.2,
                                      shear_range=0.2,
                                      zoom_range=0.2,
                                      horizontal_flip=True,
                                      fill_mode='nearest')

training_data=training_datagen.flow_from_directory(train_data_path,
                                                   target_size=(150, 150), 
                                      batch_size=32,
                                      class_mode='binary')

training_data.class_indices

valid_datagen = ImageDataGenerator(rescale=1./255)

valid_data =  valid_datagen.flow_from_directory(validation_data_path, 
                                      target_size=(150, 150), 
                                      batch_size=32,
                                      class_mode='binary')

"""## Building CNN Model"""

cnn_model=keras.models.Sequential([
                                   keras.layers.Conv2D(filters=32,kernel_size=3,input_shape=[150,150,3]),#Add First CNN Layer
                                   keras.layers.MaxPooling2D(pool_size=(2,2)), #Add First MaxPooling Layer

                                   keras.layers.Conv2D(filters=64,kernel_size=3),#Add Second CNN Layer
                                   keras.layers.MaxPooling2D(pool_size=(2,2)), #Add Second MaxPooling Layer

                                   keras.layers.Conv2D(filters=128,kernel_size=3),#Add Third CNN Layer
                                   keras.layers.MaxPooling2D(pool_size=(2,2)), #Add Third MaxPooling Layer

                                   keras.layers.Conv2D(filters=256,kernel_size=3),#Add Fourth CNN Layer
                                   keras.layers.MaxPooling2D(pool_size=(2,2)), #Add Fourth MaxPooling Layer

                                   keras.layers.Dropout(0.5),# Droupout Layers
                                   keras.layers.Flatten(),

                                   keras.layers.Dense(units=128,activation='relu'), # First Hidden Layer
                                   keras.layers.Dropout(0.1), # Droupout Layers

                                   keras.layers.Dense(units=256,activation='relu'), # Second Hidden Layer
                                   keras.layers.Dropout(0.25), # Droupout Layers

                                   keras.layers.Dense(units=2,activation='softmax') #Output Layer
                                   


])

# compile cnn model
cnn_model.compile(optimizer = Adam(learning_rate=0.001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

"""## Train CNN Model"""

model_path='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog_model.h5'
checkpoint=ModelCheckpoint(model_path,monitor='val_accuracy',verbose=1,save_best_only=True,mode='max')
callbacks_list=[checkpoint]

history = cnn_model.fit(training_data, 
                          epochs=100, 
                          verbose=1, 
                          validation_data= valid_data,
                          callbacks=callbacks_list)

"""### **Import Model**"""

model_path='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog_model.h5'

model=keras.models.load_model(model_path)

# cat images
c1='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/cat/1.jpeg'
c2='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/cat/2.jpg'
c3='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/cat/3.png'
c4='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/cat/4.jpg'
c5='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/cat/5.jpg'

# Dog images
d1='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/dog/1.jpg'
d2='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/dog/2.jpg'
d3='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/dog/3.jpg'
d4='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/dog/4.jpg'
d5='/content/drive/MyDrive/Colab Notebooks/Cat & Dog Prediction/cat&dog test/dog/5.jpg'

import numpy as np
from keras.preprocessing import image

def pred_cat_dog(model, cat_or_dog):
  test_image = image.load_img(cat_or_dog, target_size = (150, 150))
  test_image = image.img_to_array(test_image)/255
  test_image = np.expand_dims(test_image, axis = 0)

  result = model.predict(test_image).round(3)

  pred = np.argmax(result)
  print(result, "--->>>", pred)

  if pred == 0:
    print('Predicted>>> Cat')
  else:
    print('Predicted>>> Dog')

"""## Predict Output"""

for cat_or_dog in [c1,c2,c3,c4,c5,d1,d2,d3,d4,d5]:
  pred_cat_dog(model, cat_or_dog)

